<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Product extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->database();
		$this->load->model("member_m");
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        //$data["list"] = $this->member_m->getlist($search_key,$start,$limit);
        // Users from a data store e.g. database
        
        $mb_no = $this->get('mb_no');
        
        if(!empty($mb_no)){
            $users = $this->db->get_where("member", ['mb_no' => $mb_no])->row_array();
        }else{
            $users = $this->db->get("member")->result();
        }

        if ($users)
        {
            // Set the response and exit
            $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'No users were found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );

        $hash= strtoupper(hash("sha256", $this->post('mb_password')));
        $mb_id = $this->post('mb_id');
        $mb_name =  $this->post('mb_name');
        $mb_password =  $hash;
        $YmdHis 		= date('Y-m-d H:i:s');
        
        $data  = array(
            'mb_id' => $mb_id,
            'mb_name' => $mb_name,
            'mb_password' => $mb_password,
            'reg_date' => $YmdHis	
        );

        $this->db->insert('member',$data);
        
        $message = [
            'mb_no' => '', // Automatically generated by the model
            'mb_id' => $this->post('mb_id'),
            'mb_name' => $this->post('mb_name'),
            'reg_date' => $YmdHis,
            'message' => 'Added a resource'
        ];
        
        $this->set_response($message, REST_Controller::HTTP_CREATED);
        //$this->response(['Product created successfully.'], REST_Controller::HTTP_OK);

    }

    public function users_delete()
    {

        $mb_no = (int) $this->get('mb_no');
      
        // Validate the id.
        if ($mb_no <= 0)
        {
          
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
     
        // $this->some_model->delete_something($id);

        $this->db->delete('member', array('mb_no'=>$mb_no));

        $message = [
            'mb_no' => $mb_no,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // HTTP_NO_CONTENT, NO_CONTENT (204) being the HTTP response code
    }

}